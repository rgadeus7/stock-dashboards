//@version=6
indicator("Breakout Finder v6 - Matched Original + Returns", overlay=true)

// === Inputs ===
prd = input.int(5, "Pivot Period")
bo_len = input.int(200, "Max Breakout Length")
cwidthu = input.float(3.0, "Threshold Width %") / 100
mintest = input.int(2, "Min Pivot Touches")

fwdBars1 = input.int(5, "Return After Bars 1")
fwdBars2 = input.int(10, "Return After Bars 2")
fwdBars3 = input.int(20, "Return After Bars 3")
fwdBars4 = input.int(30, "Return After Bars 4")

bocolorup = input.color(color.blue, "Box Color")
lstyleStr = input.string("solid", "Line Style", options=["solid", "dashed", "dotted"])
lstyle = lstyleStr == "solid" ? line.style_solid : lstyleStr == "dashed" ? line.style_dashed : line.style_dotted

// === State ===
ph = ta.pivothigh(high, prd, prd)
var float[] phval = array.new_float()
var int[] phloc = array.new_int()

if not na(ph)
    array.unshift(phval, ph)
    array.unshift(phloc, bar_index - prd)

    sz = array.size(phloc)
    if sz > 1
        i = sz - 1
        while i >= 1
            if bar_index - array.get(phloc, i) > bo_len
                array.remove(phloc, i)
                array.remove(phval, i)
            i := i - 1

// === Width Reference ===
h_ = ta.highest(300)
l_ = ta.lowest(300)
chwidth = (h_ - l_) * cwidthu

// === Breakout Detection ===
var bool isBreakout = false
var float entryPrice = na
var int breakoutBar = na
var float bomax = na
var int bostart = na

if array.size(phval) >= mintest and close > open
    passes = 0
    for i = 0 to array.size(phval) - 1
        if close > array.get(phval, i)
            passes += 1
    if passes >= mintest
        local_bomax = array.get(phval, 0)
        int xx = 0
        for x = 0 to array.size(phval) - 1
            if array.get(phval, x) >= close
                break
            xx := x
            local_bomax := math.max(local_bomax, array.get(phval, x))
        if xx >= mintest and open <= local_bomax
            int num = 0
            int local_bostart = na
            for x = 0 to xx
                if array.get(phval, x) <= local_bomax and array.get(phval, x) >= local_bomax - chwidth
                    num += 1
                    local_bostart := array.get(phloc, x)
            if num >= mintest
                isBreakout := true
                entryPrice := close
                breakoutBar := bar_index
                bomax := local_bomax
                bostart := local_bostart

// === Draw breakout box ===
if isBreakout
    line.new(bar_index, bomax, bostart, bomax, color=bocolorup, style=lstyle)
    line.new(bar_index, bomax - chwidth, bostart, bomax - chwidth, color=bocolorup, style=lstyle)
    line.new(bostart, bomax - chwidth, bostart, bomax, color=bocolorup, style=lstyle)
    line.new(bar_index, bomax - chwidth, bar_index, bomax, color=bocolorup, style=lstyle)
    label.new(bar_index, bomax, text="Breakout!", style=label.style_label_up, color=bocolorup)

plotshape(isBreakout, location=location.belowbar, style=shape.triangleup, color=bocolorup, title="Breakout Signal")

// === Forward Returns (robust)
var float ret1 = na
var float ret2 = na
var float ret3 = na
var float ret4 = na
var float maxLoss1 = na
var float maxLoss2 = na
var float maxLoss3 = na
var float maxLoss4 = na
var float maxGain1 = na
var float maxGain2 = na
var float maxGain3 = na
var float maxGain4 = na
var int lastBreakoutBar = na

// Track returns after breakout
if not na(entryPrice)
    barsSinceBreakout = bar_index - breakoutBar
    currentReturn = (close - entryPrice) / entryPrice * 100
    highReturn = (high - entryPrice) / entryPrice * 100
    lowReturn = (low - entryPrice) / entryPrice * 100
    
    // Set lastBreakoutBar immediately when we start tracking
    if barsSinceBreakout == 0
        lastBreakoutBar := breakoutBar
        maxGain1 := highReturn
        maxLoss1 := lowReturn
        maxGain2 := highReturn
        maxLoss2 := lowReturn
        maxGain3 := highReturn
        maxLoss3 := lowReturn
        maxGain4 := highReturn
        maxLoss4 := lowReturn

    // Period 1
    if barsSinceBreakout <= fwdBars1
        maxGain1 := math.max(maxGain1, highReturn)
        maxLoss1 := math.min(maxLoss1, lowReturn)
        if barsSinceBreakout == fwdBars1
            ret1 := currentReturn

    // Period 2
    if barsSinceBreakout <= fwdBars2
        maxGain2 := math.max(maxGain2, highReturn)
        maxLoss2 := math.min(maxLoss2, lowReturn)
        if barsSinceBreakout == fwdBars2
            ret2 := currentReturn

    // Period 3
    if barsSinceBreakout <= fwdBars3
        maxGain3 := math.max(maxGain3, highReturn)
        maxLoss3 := math.min(maxLoss3, lowReturn)
        if barsSinceBreakout == fwdBars3
            ret3 := currentReturn

    // Period 4
    if barsSinceBreakout <= fwdBars4
        maxGain4 := math.max(maxGain4, highReturn)
        maxLoss4 := math.min(maxLoss4, lowReturn)
        if barsSinceBreakout == fwdBars4
            ret4 := currentReturn

// === Table ===
var int breakoutCount = 0
if isBreakout
    breakoutCount += 1
var table statTable = table.new(position.top_right, 5, 5)

// Update table on each bar after a breakout
if not na(lastBreakoutBar) and bar_index <= lastBreakoutBar + fwdBars4 + 5
    // Set headers (only once)
    table.cell(statTable, 0, 0, "Bars", text_color=color.white, bgcolor=color.gray)
    table.cell(statTable, 1, 0, "Return", text_color=color.white, bgcolor=color.gray)
    table.cell(statTable, 2, 0, "Max Gain", text_color=color.white, bgcolor=color.gray)
    table.cell(statTable, 3, 0, "Max Loss", text_color=color.white, bgcolor=color.gray)
    table.cell(statTable, 4, 0, "Instances", text_color=color.white, bgcolor=color.gray)

    // Set time periods
    table.cell(statTable, 0, 1, str.tostring(fwdBars1))
    table.cell(statTable, 0, 2, str.tostring(fwdBars2))
    table.cell(statTable, 0, 3, str.tostring(fwdBars3))
    table.cell(statTable, 0, 4, str.tostring(fwdBars4))

    // Set returns
    table.cell(statTable, 1, 1, not na(ret1) ? str.tostring(ret1, "#.##") + "%" : "–")
    table.cell(statTable, 1, 2, not na(ret2) ? str.tostring(ret2, "#.##") + "%" : "–")
    table.cell(statTable, 1, 3, not na(ret3) ? str.tostring(ret3, "#.##") + "%" : "–")
    table.cell(statTable, 1, 4, not na(ret4) ? str.tostring(ret4, "#.##") + "%" : "–")

    // Set max gains
    table.cell(statTable, 2, 1, not na(maxGain1) ? str.tostring(maxGain1, "#.##") + "%" : "–")
    table.cell(statTable, 2, 2, not na(maxGain2) ? str.tostring(maxGain2, "#.##") + "%" : "–")
    table.cell(statTable, 2, 3, not na(maxGain3) ? str.tostring(maxGain3, "#.##") + "%" : "–")
    table.cell(statTable, 2, 4, not na(maxGain4) ? str.tostring(maxGain4, "#.##") + "%" : "–")

    // Set max losses
    table.cell(statTable, 3, 1, not na(maxLoss1) ? str.tostring(maxLoss1, "#.##") + "%" : "–")
    table.cell(statTable, 3, 2, not na(maxLoss2) ? str.tostring(maxLoss2, "#.##") + "%" : "–")
    table.cell(statTable, 3, 3, not na(maxLoss3) ? str.tostring(maxLoss3, "#.##") + "%" : "–")
    table.cell(statTable, 3, 4, not na(maxLoss4) ? str.tostring(maxLoss4, "#.##") + "%" : "–")

    // Set instance count
    table.cell(statTable, 4, 1, str.tostring(breakoutCount))
    table.cell(statTable, 4, 2, str.tostring(breakoutCount))
    table.cell(statTable, 4, 3, str.tostring(breakoutCount))
    table.cell(statTable, 4, 4, str.tostring(breakoutCount))

// === Reset for next breakout
if isBreakout
    ret1 := na
    ret2 := na
    ret3 := na
    ret4 := na
    maxGain1 := na
    maxGain2 := na
    maxGain3 := na
    maxGain4 := na
    maxLoss1 := na
    maxLoss2 := na
    maxLoss3 := na
    maxLoss4 := na
    
isBreakout := false
